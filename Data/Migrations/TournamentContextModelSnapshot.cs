// <auto-generated />
using System;
using Data.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(TournamentContext))]
    partial class TournamentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.HistoryTournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("IdHistoryMatch")
                        .HasColumnType("int")
                        .HasColumnName("IdHistoryMatch");

                    b.Property<int>("IdPlayer")
                        .HasColumnType("int")
                        .HasColumnName("IdPlayer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("IdHistoryMatch");

                    b.HasIndex("IdPlayer");

                    b.ToTable("HistoryTournament", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdLoser")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("IdLoser");

                    b.Property<int?>("IdWinner")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("IdWinner");

                    b.HasKey("Id");

                    b.HasIndex("IdLoser");

                    b.HasIndex("IdWinner");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("Data.Entities.MatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdMatch")
                        .HasColumnType("int")
                        .HasColumnName("IdMatch");

                    b.Property<int>("IdTournament")
                        .HasColumnType("int")
                        .HasColumnName("IdTournament");

                    b.HasKey("Id");

                    b.HasIndex("IdMatch");

                    b.ToTable("MatchHistory", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Luck")
                        .HasColumnType("int")
                        .HasColumnName("Luck");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)")
                        .HasColumnName("Name");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("Speed");

                    b.Property<int>("Strenght")
                        .HasColumnType("int")
                        .HasColumnName("Strenght");

                    b.HasKey("Id");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("Data.Entities.HistoryTournament", b =>
                {
                    b.HasOne("Data.Entities.MatchHistory", "MatchHistoryForeignKey")
                        .WithMany("HistoryTournamentOfMatchHistory")
                        .HasForeignKey("IdHistoryMatch")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HistoryTournament_MatchHistory");

                    b.HasOne("Data.Entities.Player", "IdPlayerForeignKey")
                        .WithMany("HistoryTournamentOfPlayer")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HistoryTournament_Player");

                    b.Navigation("IdPlayerForeignKey");

                    b.Navigation("MatchHistoryForeignKey");
                });

            modelBuilder.Entity("Data.Entities.Match", b =>
                {
                    b.HasOne("Data.Entities.Player", "MatchLoser")
                        .WithMany("PlayerLoser")
                        .HasForeignKey("IdLoser")
                        .IsRequired()
                        .HasConstraintName("FK_Match_Loser");

                    b.HasOne("Data.Entities.Player", "MatchWinner")
                        .WithMany("PlayerWinner")
                        .HasForeignKey("IdWinner")
                        .IsRequired()
                        .HasConstraintName("FK_Match_Winner");

                    b.Navigation("MatchLoser");

                    b.Navigation("MatchWinner");
                });

            modelBuilder.Entity("Data.Entities.MatchHistory", b =>
                {
                    b.HasOne("Data.Entities.Match", "MatchHistoryList")
                        .WithMany("MatchHistoryCollection")
                        .HasForeignKey("IdMatch")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MatchHistory_Match");

                    b.Navigation("MatchHistoryList");
                });

            modelBuilder.Entity("Data.Entities.Match", b =>
                {
                    b.Navigation("MatchHistoryCollection");
                });

            modelBuilder.Entity("Data.Entities.MatchHistory", b =>
                {
                    b.Navigation("HistoryTournamentOfMatchHistory");
                });

            modelBuilder.Entity("Data.Entities.Player", b =>
                {
                    b.Navigation("HistoryTournamentOfPlayer");

                    b.Navigation("PlayerLoser");

                    b.Navigation("PlayerWinner");
                });
#pragma warning restore 612, 618
        }
    }
}
